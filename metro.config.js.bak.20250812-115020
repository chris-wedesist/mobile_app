// Learn more https://docs.expo.io/guides/customizing-metro
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

// PERMANENT FIX FOR EXPO SDK 53 NODE.JS MODULE ERRORS
// Root cause: SDK 53 enables package.json exports by default, exposing Node.js core modules
// Solution: Disable package exports and add official React Native polyfills

// 1. Disable package.json exports support (primary fix)
config.resolver.unstable_enablePackageExports = false;

// 2. Add official React Native polyfills for Node.js modules
config.serializer.getPolyfills = require('@react-native/js-polyfills');

// 3. Configure resolver to handle remaining Node.js module requests
config.resolver.resolveRequest = (context, moduleName, platform) => {
  // List of Node.js core modules that should be empty (no polyfills available)
  const emptyNodeModules = [
    'crypto', 'http', 'https', 'os', 'path', 'fs', 'net', 'tls', 'zlib',
    'child_process', 'cluster', 'dgram', 'dns', 'domain', 'module',
    'perf_hooks', 'process', 'punycode', 'readline', 'repl', 'tty',
    'v8', 'vm', 'worker_threads', 'inspector', 'async_hooks', 'constants', 'timers',
    'url', 'querystring', 'stream', 'util', 'events', 'buffer'  // Added url, querystring, stream, util, events
  ];
  
  if (emptyNodeModules.includes(moduleName)) {
    // Return path to a real empty file instead of generic empty type
    // This prevents symbolication errors
    return {
      type: 'sourceFile',
      filePath: require.resolve('@react-native/js-polyfills/index.js'),
    };
  }
  
  // For all other modules, let Metro resolve them normally
  return context.resolveRequest(context, moduleName, platform);
};

// 4. Fix symbolication errors with <anonymous> files
config.server = {
  enhanceMiddleware: (middleware, server) => {
    return (req, res, next) => {
      if (req.url && req.url.includes('symbolicate')) {
        // Intercept symbolication requests to handle <anonymous> file errors
        try {
          return middleware(req, res, next);
        } catch (error) {
          if (error.path && error.path.includes('<anonymous>')) {
            // Return empty stack for anonymous files
            res.status(200).json({ stack: [] });
            return;
          }
          throw error;
        }
      }
      return middleware(req, res, next);
    };
  },
};

// 5. Configure transformer settings for optimal compatibility
config.transformer.getTransformOptions = async () => ({
  transform: {
    experimentalImportSupport: false,
    inlineRequires: true,
  },
});

console.log('âœ… Metro configured for Expo SDK 53 with symbolication fixes');

module.exports = config;
